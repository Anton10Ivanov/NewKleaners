# Development Workflow

## Getting Started

1. **Environment Setup**

   ```bash
   npm install
   cp .env.example .env
   # Configure your Supabase credentials
   npm run dev
   ```

2. **Code Standards**
   - Follow existing TypeScript patterns
   - Use mobile-first responsive design
   - Keep components under 50 lines
   - Write descriptive commit messages

## Component Development

### Creating New Components

1. **Location**: Place in appropriate feature folder
2. **Naming**: Use PascalCase for components
3. **Props**: Define clear TypeScript interfaces
4. **Export**: Use default exports for components

Example component structure:

```typescript
interface ComponentProps {
  title: string;
  onAction: () => void;
}

const Component: React.FC<ComponentProps> = ({ title, onAction }) => {
  return (
    <div className="p-4">
      <h2>{title}</h2>
      <button onClick={onAction}>Action</button>
    </div>
  );
};

export default Component;
```

### Styling Guidelines

#### Design System Integration

- **Use shadcn/ui components** as the foundation - prefer composition over
  custom styling
- **Leverage CSS variables** for theming: `hsl(var(--primary))` instead of
  hardcoded colors
- **Use Class Variance Authority (CVA)** for component variants when extending
  shadcn/ui components
- **Follow semantic naming**: Use `primary`, `secondary`, `muted`, `accent`
  instead of color names

#### TailwindCSS Best Practices

- **Mobile-first approach**: Default styles for mobile, then `md:`, `lg:`,
  `xl:`, `2xl:`
- **Use design tokens**: Prefer custom spacing (`spacing-sm`, `spacing-md`) over
  arbitrary values
- **Consistent spacing scale**: Use the defined scale (`xs`, `sm`, `md`, `lg`,
  `xl`, `2xl`, `3xl`, `4xl`)
- **Typography hierarchy**: Use semantic font sizes (`text-xs`, `text-sm`,
  `text-base`, etc.)

#### Component Styling Patterns

```typescript
// ✅ Good: Using shadcn/ui with CVA
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary-hover",
        outline: "border border-input hover:bg-accent",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 px-3",
      },
    },
  }
);

// ✅ Good: Using CSS variables for theming
<div className="bg-card text-card-foreground border border-border" />

// ❌ Avoid: Hardcoded colors
<div className="bg-blue-500 text-white border-gray-300" />
```

#### Color System Usage

- **Primary colors**: `primary`, `primary-foreground`, `primary-hover`
- **Semantic colors**: `destructive`, `success`, `warning`, `info`
- **Surface colors**: `background`, `foreground`, `card`, `popover`
- **Interactive colors**: `accent`, `muted`, `border`, `input`, `ring`
- **Dark mode**: Automatically handled via CSS variables

#### Spacing and Layout

- **Use semantic spacing**: `card-spacing-sm`, `section-spacing-md`,
  `component-spacing-xs`
- **Layout containers**: Use `UnifiedContainer` for consistent page layouts
- **Responsive spacing**: `p-4 md:p-6 lg:p-8` for responsive padding
- **Touch targets**: Minimum `touch-min` (44px) for interactive elements

#### Animation and Transitions

- **Use design system durations**: `duration-fast`, `duration-normal`,
  `duration-slow`
- **Consistent easing**: `ease`, `ease-in`, `ease-out`, `ease-in-out`
- **Predefined animations**: `animate-fadeIn`, `animate-slideIn`,
  `animate-float`

#### Component Composition Patterns

```typescript
// ✅ Good: Composing shadcn/ui components
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

const ServiceCard = ({ service }) => (
  <Card className="hover:shadow-lg transition-shadow">
    <CardHeader>
      <CardTitle className="flex items-center justify-between">
        {service.name}
        <Badge variant="secondary">{service.category}</Badge>
      </CardTitle>
    </CardHeader>
    <CardContent>
      <Button className="w-full">Learn More</Button>
    </CardContent>
  </Card>
);

// ✅ Good: Extending shadcn/ui with CVA
import { cva } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const alertVariants = cva(
  "rounded-lg border p-4 text-sm",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        success: "bg-success/10 text-success border-success/20",
        warning: "bg-warning/10 text-warning border-warning/20",
      },
    },
  }
);
```

## State Management

### When to Use What

- **useState**: Component-local UI state
- **React Query**: Server data, caching, synchronization
- **Zustand**: Global application state (user preferences, etc.)
- **URL state**: Shareable, bookmarkable state

### Error Handling

Always use the standardized error utilities:

```typescript
import { handleApiError } from '@/utils/errors';

try {
  await apiCall();
} catch (error) {
  handleApiError(error, 'Failed to load data');
}
```

## Testing

Currently, the project doesn't have automated testing. Manual testing
guidelines:

1. Test on mobile devices/responsive design
2. Test all user flows end-to-end
3. Verify error states and loading states
4. Check accessibility with screen readers

## Performance Guidelines

- Use React.memo for components that receive stable props
- Implement proper dependency arrays in useEffect and useCallback
- Avoid unnecessary re-renders
- Use lazy loading for routes, not critical components

## Code Review Checklist

### Functionality

- [ ] Mobile responsiveness tested
- [ ] TypeScript errors resolved
- [ ] No console errors in development
- [ ] Proper error handling implemented
- [ ] Loading states provided
- [ ] Accessibility considerations addressed

### Styling & Design System

- [ ] Uses shadcn/ui components where possible
- [ ] Leverages CSS variables for theming (`hsl(var(--primary))`)
- [ ] Follows semantic color naming (`primary`, `secondary`, `muted`)
- [ ] Uses design system spacing tokens (`spacing-sm`, `card-spacing-md`)
- [ ] Implements proper responsive design (mobile-first)
- [ ] Uses CVA for component variants when extending shadcn/ui
- [ ] Avoids hardcoded colors and arbitrary values
- [ ] Consistent with existing component patterns
